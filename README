Problema 1:
	Problema are o abordare greedy. Am creat un vector de perechi
de forma <Pi, Ui> pe care ulterior l-am ordonat in functie de puterea
sa Pi. Am o variabila finalPower in care salvez cate monede pot fi
minate minim si pe care o voi incrementa de fiecare data cand este
posibil. De asemenea, am o variabila totalCost in care salvez costul
pentru toate upgrade-urile. Pentru a nu "pierde" valoarea respectiva,
iau o variabila auxiliara -cost partial- unde salvez costul pentru
fiecare upgrade in parte. Daca suma de pana atunci + costul urmatorului
upgrade depaseste suma de bani pe care o avem (B), iesim din iteratie.
Altfel, cresc numarul de cryptomonede minate, cresc pretul total, si
pun costul partial pe 0.

Problema 2:
	Problema se bazeaza pe rezolvarea problemei clasice de dinamica
a rucsacului, adaugandu-se o condintie, adica o dimensiune in plus a
matricei.
	Am creat o clasa care sa reprezinte obiectul Stock. Stock-urile
se ordoneaza descrescator dupa valoarea pe care o au initial, iar in cazul
in care sunt 2 valori egale vor fi ordonate dupa costul minim.
	Incep prin a sorta lista stocks. Creez o matrice in 3 dimensiuni
in care pe liniile si coloanele 0 - din fiecare dimensiune - pun 0 neputand
calcula un profit in lipsa unui obiect de studiat. Prima dimensiune reprezinta
obiectele, a doua costul initial si a 3a pierderea corespunzatoare. Formula
cu care calculez elementele este:

profit[i][j][k] = Max (profit[i-1][j][k],
			profit[i-1][j-pretul_curent][k-pierdere] + Profit)
			
	In final, calculez maximul matricii care reprezinta de fapt chiar
profitul maxim cautat.

Problema 3:
	Aceasta problema am impartit-o in doua subprobleme pentru prefix
si pentru sufix. In primul rand verific daca nu este deja vale - adica
daca sirul nu este compus din elemente egale sau dintr-un sir descrescator
urmat de unul crescator. Impartirea o fac de la minimul sirului. In plus,
nu vreau ca un sir complet descrescator sau unul complet crescator sa fie
luat in calcul, el putand fi rezolvat separat egaland ultimele 2 (respectiv
primele 2) elemente.
	Daca sirul nu se incadreaza in cazurile de mai sus, apelez functiile
pentru prefix si sufix (diferenta este faptul ca operatiile sunt facute invers).
In prefix aleg minim local primul element. Daca urmatorul este mai mic decat el,
minimul se actualizeaza, Altfel, adaug la numarul de ore diferenta dintre element
si minim si setez numarul pe minimul local. Poate exista cazul cand minimul
global sa fie la final, respectiv la inceput, ceea ce ar putea cauza imposibilitatea
crearii unei vai, asa ca am tratat cazul la inceputul functiei, considerand
elementul anterior egal cu ultimul.
	Analog, rezolvarea pentru sufix, doar ca plec de la finalul sirului.

Problema 4:
	Aceasta problema se rezolva cu ajutorul programarii dinamice. Pentru
inceput, creez o matrice de tip long cu N linii care reprezinta inaltimile
muntilor, si cu 3 coloane. Am observat ca dintr-un element este suficient sa
scad maxim 2 unitati pentru a putea satisface conditia de a nu fi egale
2 creste adiacente. Astfel, coloanele matricei vor reprezenta cu cat este nevoie
sa decrementez elementul de pe linie, iar casuta min[i][j] o sa fie costul.
Am initializat prima linie a matricei cu 0, costul aferent si dublul costului.
Pornesc verificarea de la a doua linie si compar elementul curent decrementat
corespunzator cu elementul anteriordin care scad pe rand aceleasi valori.
In cazul in care nu ajung cu o inaltime negativa si prin decrementarea inaltimii
curente nu ajung la o alta inaltime egala cu cea a elementului anterior,
calculez minimul local. Dupa ce am verificat toate cazurile, pentru elementul i
din care scad j unitati, voi avea costul calculat dupa formula:
		min[i][j] = j * costul_elementului + minim_local;
	In final, rezutatul o sa fie minimul ultimei linii din matrice.
